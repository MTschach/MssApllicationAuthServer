   /*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'jacoco'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

apply from: 'https://raw.githubusercontent.com/MTschach/MssUtils/master/deploy.gradle'

apply from: 'https://raw.githubusercontent.com/MTschach/MssUtils/master/artifactory.gradle'

apply from: 'https://raw.githubusercontent.com/MTschach/MssUtils/master/eclipse.gradle'


def artifact = new Properties()
artifact.load(new FileInputStream("${project.projectDir}${File.separator}..${File.separator}deploy.settings"))

buildscript {
   apply from: 'https://raw.githubusercontent.com/MTschach/MssUtils/master/buildscript.gradle'
}


configurations {
   genClasses
   implementation
   testImplementation.extendsFrom implementation
}

sourceSets {
   main {
      java {
         srcDir 'src'
         srcDir '../client/gen'
         srcDir '../client/common'
         srcDir 'gen'
      }
   }
   
   test {
      java {
         srcDir 'test'
      }
   }
}


dependencies {
   implementation       group: 'Mss'                                          , name: 'MssUtils'                           , version: 'latest.release'
   implementation       group: 'Mss'                                          , name: 'MssDbUtils'                         , version: 'latest.release'
   implementation       group: 'Mss'                                          , name: 'MssNetUtils'                        , version: 'latest.release'
   implementation       group: 'Mss'                                          , name: 'MssConfigTools'                     , version: 'latest.release'
   implementation       group: 'Mss'                                          , name: 'MssCronJobTools'                    , version: 'latest.release'
   implementation       group: 'Mss'                                          , name: 'MssDbMigration'                     , version: 'latest.release'
   implementation       group: 'javax.ws.rs'                                  , name: 'javax.ws.rs-api'                    , version: 'latest.release'
   implementation       group: 'org.eclipse.jetty'                            , name: 'jetty-servlet'                      , version: 'latest.release'
   implementation       group: 'com.fasterxml.jackson.core'                   , name: 'jackson-core'                       , version: 'latest.release'
   implementation       group: 'com.fasterxml.jackson.core'                   , name: 'jackson-databind'                   , version: 'latest.release'
   implementation       group: 'com.fasterxml.jackson.core'                   , name: 'jackson-annotations'                , version: 'latest.release'
   implementation       group: 'org.apache.logging.log4j'                     , name: 'log4j-core'                         , version: 'latest.release'
   implementation       group: 'org.apache.logging.log4j'                     , name: 'log4j-api'                          , version: 'latest.release'
   implementation       group: 'org.apache.logging.log4j'                     , name: 'log4j-slf4j-impl'                   , version: 'latest.release'
   implementation       group: 'javax.xml.bind'                               , name: 'jaxb-api'                           , version: 'latest.release'
   implementation       group: 'commons-cli'                                  , name: 'commons-cli'                        , version: "${commonsCliVersion}"
   implementation       group: 'mysql'                                        , name: 'mysql-connector-java'               , version: "${mysqlConnectorVersion}"

   // Use JUnit test framework
   testImplementation   group: 'org.junit.jupiter'                            , name: 'junit-jupiter-engine'               , version: "${junitVersion}"
   testImplementation   group: 'org.easymock'                                 , name: 'easymock'                           , version: "${easyMockVersion}"
   testImplementation   group: 'org.dbunit'                                   , name: 'dbunit'                             , version: 'latest.release'
   testImplementation   group: 'org.testcontainers'                           , name: 'testcontainers'                     , version: "${testcontainersVersion}"
   testImplementation   group: 'org.testcontainers'                           , name: 'mysql'                              , version: "${testcontainersVersion}"
   testImplementation   group: 'org.testcontainers'                           , name: 'junit-jupiter'                      , version: "${testcontainersVersion}"

   genClasses group: 'Mss'         , name: 'MssXml2Class'           , version: 'latest.release'
   genClasses group: 'Mss'         , name: 'MssUtils'           , version: 'latest.release'
   genClasses group: 'Mss'         , name: 'MssConfigTools'           , version: 'latest.release'
}


compileJava.dependsOn(':client:genClasses')


jar {
   dependsOn 'serverJar'
}


task genClasses {
   dependsOn ('genDbParams');
}

task genParams(type:JavaExec) {
   group 'gen'
   workingDir = "${rootDir}/server"
   main      = "de.mss.xml2class.Xml2Class"
   classpath {[
      configurations.genClasses
   ]}
   args '-t', 'templates/client', '-i', '../params/client', '-o', 'gen'
}


task genDbParams(type:JavaExec) {
   group 'gen'
   workingDir = "${rootDir}/server"
   main      = "de.mss.xml2class.Xml2Class"
   classpath {[
      configurations.genClasses
   ]}
   args '-t', 'templates/db', '-i', '../params/db', '-o', 'gen'
}


clean.doFirst {
   delete "${rootDir}/gen"
      delete "${rootDir}/servergen"
}


task customFatJar(type: Jar) {
   manifest {
      attributes "Main-Class": "de.mss.fullfillment.FFMaster"
   }
   baseName = 'all-in-on-jar'	
   from {
      configuration.compile.collect { it.isDirectory() ? it : zipTree(it) }
   }
   with jar
}


task serverJar(type: Jar) {
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
   manifest {
      attributes "Main-Class": "de.mss.applicationauth.server.ApplicationAuthServer"
   }
   baseName = 'MssApplicationAuthServer'
   from(sourceSets.main.output)
   from {
      configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
   }
   with jar
}

jacocoTestReport {
   dependsOn test
   reports {
      xml.required = true
   }
}


test {
    useJUnitPlatform()
}


// Define the main class for the application
mainClassName = 'de.mss.applicationauth.server.ApplicationAuthServer'
